{
    "fb.doctor.disabled-tests": [
        "CorpcanalDoctor"
    ],
    "fb.ms-remote-connections.hosts": [
        {
            "hostname": "our.cmcginty.sb.facebook.com",
            "folders": [
                "/data/users/cmcginty/configerator-dj/",
                "/data/users/cmcginty/configerator-dsi/",
                "/data/users/cmcginty/configerator-hg/",
                "/data/users/cmcginty/configerator-sitevars/",
                "/data/users/cmcginty/configerator/",
                "/data/users/cmcginty/fbsource/fbcode/",
                "/data/users/cmcginty/www/"
            ]
        },
        {
            "hostname": "devvm4733.atn0.facebook.com",
            "folders": []
        }
    ],
    "fb.ms-remote-connections.odtypes": [
        {
            "type": "ondemand_www",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_instagram",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_fbcode",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_configerator",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_instagram_www",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_fbsource",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_whatsapp_server_vpnless",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_opsfiles",
            "flavor": "default",
            "folders": []
        },
        {
            "type": "ondemand_www_fbsource_configerator",
            "flavor": "default",
            "folders": []
        }
    ],
    "fb.ms-remote-connections.starred": [
        {
            "hostType": "ondemand_www",
            "flavor": "default",
            "label": "WWW",
            "folders": [],
            "preferredHardwareOption": {
                "name": "faster IO",
                "label": "Prefer instances that are single-tenant and have better IO"
            }
        }
    ],
    "arcinfer.runOnSave": true,
    "interactive-smartlog.autoRunMergeDrivers": true,
    "interactive-smartlog.bottom-drawer-height": 500,
    "interactive-smartlog.fetch": "jf get and checkout",
    "interactive-smartlog.pull": "hg pull",
    "interactive-smartlog.right-drawer-width": 747,
    "interactive-smartlog.prefer-new-isl": true,
    // ---------------------------------------------
    // -------- VSCode Core Settings ---------------
    "blame.disableInlineBlame": true,
    "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
    "editor.autoClosingBrackets": "never",
    "editor.autoClosingQuotes": "never", // NO, GOD! PLEASE NO!!! NOOOOOO!!!
    "editor.autoSurround": "never", // When the word is selected.
    "editor.cursorSmoothCaretAnimation": "off",
    "editor.fontFamily": "UbuntuMono Nerd Font Mono",
    "editor.fontSize": 13,
    "editor.lineHeight": 13,
    "editor.minimap.enabled": true,
    "editor.quickSuggestions": {
        "comments": "off",
        "strings": "off",
        "other": "off"
    },
    "editor.quickSuggestionsDelay": 100,
    "editor.rulers": [
        80,
        120
    ],
    "editor.formatOnSave": true,
    "editor.smoothScrolling": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.tabCompletion": "on",
    "explorer.openEditors.visible": 12,
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "files.trimTrailingWhitespace": true,
    "hg.jumpToNextConflictOnSave": "Jump On Save And Open ISL When Done",
    "homepage.startup": "Never",
    "meta.global.history.enabled": true,
    "notebook.formatOnSave.enabled": true,
    "terminal.integrated.defaultProfile.osx": "zsh",
    "terminal.integrated.enableMultiLinePasteWarning": false,
    "terminal.integrated.systemd.shouldUse": true,
    "window.restoreWindows": "none",
    "window.zoomLevel": 1,
    "workbench.colorTheme": "Super One Dark",
    "workbench.editor.empty.hint": "hidden",
    "workbench.editor.enablePreview": true,
    "workbench.editor.enablePreviewFromCodeNavigation": true,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    "workbench.startupEditor": "newUntitledFile",
    "workbench.colorCustomizations": {
        "tab.activeBackground": "#2B78C8",
        "tab.activeFont": "#2B78C8"
    },
    // ---------------------------------------------
    // --------- Language Overrides ----------------
    "[cpp]": {
        "editor.defaultFormatter": "nuclide.arclint",
        "files.trimTrailingWhitespace": false,
        "editor.formatOnSave": true
    },
    "[git-commit]": {
        "editor.rulers": [
            50
        ]
    },
    "[hack]": {
        "editor.formatOnType": false,
        "editor.tabSize": 2,
        "editor.wordSeparators": "`~!@#%^&*()-=+[{]}\\|;:'\",.<>/?",
        "editor.autoClosingBrackets": "never",
        "editor.defaultFormatter": "nuclide.hack"
    },
    "[plaintext]": {
        "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
        }
    },
    "[python]": {
        "editor.rulers": [
            88
        ],
        "editor.codeActionsOnSave": {
            "source.organizeImports": "always"
        },
        "files.trimTrailingWhitespace": true,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    "[java]": {
        "files.trimTrailingWhitespace": true,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    "[kotlin]": {
        "files.trimTrailingWhitespace": true,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    "[rust]": {
        "files.trimTrailingWhitespace": true,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    // ---------------------------------------------
    // -------- Force Extension Type --------------
    "remote.extensionKind": {
        "ryuta46.multi-command": [
            "ui"
        ],
    },
    // ---------------------------------------------
    // -------- cSpell Right Extension --------------
    "cSpell.language": "en",
    "cSpell.userWords": [
        "allowlist",
        "allowlisted",
        "arcanist",
        "automations",
        "backout",
        "blocklist",
        "Bouncycastle",
        "classname",
        "Clearning",
        "cmcginty",
        "config's",
        "configerator",
        "EMEA",
        "ents",
        "FBID",
        "fblite",
        "frontends",
        "instanceof",
        "Krusty",
        "Landcastle",
        "lastx",
        "logview",
        "lowercasing",
        "Mandoline",
        "megarepo",
        "minva",
        "multisect",
        "MWFS",
        "nonnull",
        "NORAM",
        "omni",
        "oncall",
        "Oncalls",
        "Phabricator",
        "println",
        "referer",
        "releng",
        "remediations",
        "shellcheck",
        "sitevar",
        "smartlog",
        "snapraid",
        "strtotime",
        "struct",
        "Subcommand",
        "Subcommands",
        "Traversables",
        "TRUNKSTABLE",
        "TRUNKTERN",
        "UNBREAK",
        "unixname",
        "UNIXTIME",
        "unland",
        "Upsert",
        "vtable"
    ],
    "cSpell.flagWords": [
        "pipelien"
    ],
    "cSpell.enableFiletypes": [
        "bat",
        "clojure",
        "coffeescript",
        "diff",
        "dockercompose",
        "dockerfile",
        "flow",
        "fsharp",
        "git-rebase",
        "groovy",
        "hack",
        "hlsl",
        "ignore",
        "ini",
        "jinja",
        "jsx-tags",
        "julia",
        "juliamarkdown",
        "jupyter",
        "log",
        "lua",
        "makefile",
        "objective-c",
        "objective-cpp",
        "perl",
        "perl6",
        "pip-requirements",
        "powershell",
        "properties",
        "r",
        "razor",
        "ruby",
        "scminput",
        "search-result",
        "shaderlab",
        "shellscript",
        "sql",
        "swift",
        "toml",
        "vb",
        "vimrc",
        "xml",
        "xsl",
        "thrift"
    ],
    "cSpell.enabledLanguageIds": [
        "asciidoc",
        "c",
        "cpp",
        "csharp",
        "css",
        "git-commit",
        "go",
        "graphql",
        "handlebars",
        "haskell",
        "html",
        "jade",
        "java",
        "javascript",
        "javascriptreact",
        "json",
        "jsonc",
        "latex",
        "less",
        "markdown",
        "php",
        "plaintext",
        "python",
        "pug",
        "restructuredtext",
        "rust",
        "scala",
        "scss",
        "text",
        "typescript",
        "typescriptreact",
        "yaml",
        "yml",
        "bash"
    ],
    // ---------------------------------------------
    // -------- VS Icons Extension --------------
    "vsicons.dontShowNewVersionMessage": true,
    // ---------------------------------------------
    // --- Vim Extension Settings / Key Mappings ---
    "vim.hlsearch": true,
    "vim.leader": "space",
    "vim.searchHighlightColor": "rgba(246, 246, 80)", // yellow highlight color
    "vim.searchHighlightTextColor": "rgba(0,0,0)",
    "vim.useSystemClipboard": true,
    // NORMAL mode
    "vim.normalModeKeyBindingsNonRecursive": [
        // --------------------------------------------------------------------
        { // Quit (i.e cmd-q)
            "before": [
                "<leader>",
                "q"
            ],
            "commands": [
                "workbench.action.quit"
            ],
        },
        // ## Window toggles:
        { // toggle file explorer
            "before": [
                "ctrl+e",
            ],
            "commands": [
                "workbench.explorer.fileView.focus"
            ],
        },
        { // toggle sidebar (cmd-b)
            "before": [
                "<leader>",
                "t"
            ],
            "commands": [
                "workbench.action.toggleSidebarVisibility"
            ]
        },
        { // select file in directory tree
            "before": [
                "<leader>",
                "f"
            ],
            "commands": [
                "revealInExplorer"
            ],
        },
        { // rename file in directory tree
            "before": [
                "<leader>",
                "r",
                "f"
            ],
            "commands": [
                "renameFile"
            ]
        },
        { // open big grep search
            "before": [
                "<leader>",
                "g",
                "g"
            ],
            "commands": [
                "nuclide-biggrep:open-pane"
            ],
        },
        { // open terminal
            "before": [
                "<leader>",
                "g",
                "t"
            ],
            "commands": [
                "workbench.action.terminal.toggleTerminal"
            ],
        },
        { // open interactive smartlog (ISL)
            "before": [
                "<leader>",
                "g",
                "i"
            ],
            "commands": [
                "fb-hg.toggle-interactive-smartlog"
            ],
        },
        { // focus "open editors" sidebar
            "before": [
                "<leader>",
                "g",
                "e"
            ],
            "commands": [
                "workbench.files.action.focusOpenEditorsView"
            ],
        },
        // --------------------------------------------------------------------
        // ## Feature toggles:
        { // toggle word wrap
            "before": [
                "<leader>",
                "o",
                "w"
            ],
            "commands": [
                "editor.action.toggleWordWrap"
            ],
        },
        { // toggle hg blame
            "before": [
                "<leader>",
                "o",
                "b",
            ],
            "commands": [
                "blame.toggle-blame"
            ],
        },
        { // toggle spellchecker
            "before": [
                "<leader>",
                "o",
                "s",
            ],
            "commands": [
                "cSpell.toggleEnableSpellChecker"
            ],
        },
        // --------------------------------------------------------------------
        // ## Cursor motion commands:
        { // half-page up, centered
            "before": [
                "ctrl+k"
            ],
            "after": [
                "ctrl+u",
                "M"
            ]
        },
        { // half-page down, centered
            "before": [
                "ctrl+j"
            ],
            "after": [
                "ctrl+d",
                "M"
            ]
        },
        // --------------------------------------------------------------------
        // ## Tab motion commands <C-w>:
        { // go to previous tab
            "before": [
                "ctrl+h",
            ],
            "commands": [
                "workbench.action.previousEditor"
            ]
        },
        { // go to next tab
            "before": [
                "ctrl+l",
            ],
            "commands": [
                "workbench.action.nextEditor"
            ]
        },
        { // move tab to left group
            "before": [
                "ctrl+w",
                "ctrl+h"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupLeft"
            ]
        },
        { // move tab to right group
            "before": [
                "ctrl+w",
                "ctrl+l"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupRight"
            ]
        },
        { // move tab to above group
            "before": [
                "ctrl+w",
                "ctrl+k"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupUp"
            ]
        },
        { // move tab to lower group
            "before": [
                "ctrl+w",
                "ctrl+j"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupDown"
            ]
        },
        { // join all tabs to single window
            "before": [
                "ctrl+w",
                "w"
            ],
            "commands": [
                "workbench.action.joinAllGroups"
            ]
        },
        // --------------------------------------------------------------------
        // ## Editor:
        { // Fixes vim-undo brokenness (FXIME)
            "before": [
                "u"
            ],
            "commands": [
                "undo"
            ],
        },
        { // Show hover/peek window at current cursor (gh)
            "before": [
                "ctrl+i"
            ],
            "commands": [
                "editor.action.showHover"
            ]
        },
        { // Find all code refrences of current symbol
            "before": [
                "<leader>",
                "ctrl+]"
            ],
            "commands": [
                "references-view.find"
            ]
        },
        { // Reload file from disk (drop editor changes)
            "before": [
                "ctrl+r"
            ],
            "after": [
                "workbench.action.files.revert"
            ]
        },
        { // yank current position to end of line (like D)
            "before": [
                "Y"
            ],
            "after": [
                "y",
                "$"
            ]
        },
        { // paste after current line
            "before": [
                "<leader>",
                "p"
            ],
            "commands": [
                "editor.action.insertLineAfter",
                "editor.action.clipboardPasteAction"
            ]
        },
        { // search word under cursor
            "before": [
                "ctrl+f"
            ],
            "after": [
                "*"
            ]
        },
        { // disable highlight search
            "before": [
                "<leader>",
                "/"
            ],
            "commands": [
                ":nohls"
            ]
        },
        { // redo
            "before": [
                "ctrl+u"
            ],
            "commands": [
                "redo"
            ]
        },
        { // document format
            "before": [
                "<leader>",
                "F"
            ],
            "commands": [
                "editor.action.formatDocument"
            ]
        },
        { // Vim-Unimpaired, add line above
            "before": [
                "[",
                "<space>"
            ],
            "commands": [
                "editor.action.insertLineBefore",
                "cursorDown"
            ]
        },
        { // Vim-Unimpaired, add line above
            "before": [
                "]",
                "<space>"
            ],
            "commands": [
                "editor.action.insertLineAfter",
                "cursorUp"
            ]
        },
        { // Vim-Unimpaired, move line up
            "before": [
                "[",
                "e"
            ],
            "commands": [
                "editor.action.moveLinesUpAction",
            ]
        },
        { // Vim-Unimpaired, move line down
            "before": [
                "]",
                "e"
            ],
            "commands": [
                "editor.action.moveLinesDownAction",
            ]
        },
        { // TAB indent
            "before": [
                "tab"
            ],
            "commands": [
                "editor.action.indentLines"
            ]
        },
        {
            "before": [
                "shift+tab"
            ],
            "commands": [
                "editor.action.outdentLines"
            ]
        },
        { // Go to symbol
            "before": [
                "ctrl+]"
            ],
            "commands": [
                "editor.action.revealDefinition"
            ]
        },
        { // Go to NEXT symbol
            "before": [
                "ctrl+shift+]"
            ],
            "commands": [
                "workbench.action.navigateForward"
            ]
        },
        { // Go to PREVIOUS symbol
            "before": [
                "ctrl+t"
            ],
            "commands": [
                "workbench.action.navigateBack"
            ]
        },
        { // Spelling, next word
            "before": [
                "]",
                "s"
            ],
            "commands": [
                "cSpell.goToNextSpellingIssue",
                "extension.vim_escape"
            ]
        },
        { // Spelling, previous word
            "before": [
                "[",
                "s"
            ],
            "commands": [
                "cSpell.goToPreviousSpellingIssue",
                "extension.vim_escape"
            ]
        },
        { // Spelling, previous word
            "before": [
                "z",
                "g"
            ],
            "commands": [
                "cSpell.addWordToUserSettings"
            ]
        },
    ],
    // INSERT mode
    "vim.insertModeKeyBindingsNonRecursive": [
        // ## Tab motion commands <C-w>:
        { // go to previous tab
            "before": [
                "ctrl+h",
            ],
            "commands": [
                "workbench.action.previousEditor"
            ]
        },
        { // go to next tab
            "before": [
                "ctrl+l",
            ],
            "commands": [
                "workbench.action.nextEditor"
            ]
        },
    ],
    // VISUAL mode
    "vim.visualModeKeyBindingsNonRecursive": [
        // --------------------------------------------------------------------
        // ## Tab motion commands <C-w>:
        { // go to previous tab
            "before": [
                "ctrl+h",
            ],
            "commands": [
                "workbench.action.previousEditor"
            ]
        },
        { // go to next tab
            "before": [
                "ctrl+l",
            ],
            "commands": [
                "workbench.action.nextEditor"
            ]
        },
        // --------------------------------------------------------------------
        // ## Cursor motion commands:
        { // half-page up, centered
            "before": [
                "ctrl+k"
            ],
            "after": [
                "ctrl+u",
                "M"
            ]
        },
        { // half-page down, centered
            "before": [
                "ctrl+j"
            ],
            "after": [
                "ctrl+d",
                "M"
            ]
        },
        { // TAB indent
            "before": [
                "tab"
            ],
            "commands": [
                "editor.action.indentLines"
            ]
        },
        {
            "before": [
                "shift+tab"
            ],
            "commands": [
                "editor.action.outdentLines"
            ]
        },
        { // Sort selected lines
            "before": [
                "s"
            ],
            "commands": [
                "editor.action.sortLinesAscending"
            ]
        },
        { // Reverse sort selected lines
            "before": [
                "S"
            ],
            "commands": [
                "editor.action.sortLinesDescending"
            ]
        },
        { // Expand selection
            "before": [
                "H"
            ],
            "commands": [
                "editor.action.smartSelect.expand"
            ]
        },
        { // Shrink selection
            "before": [
                "L"
            ],
            "commands": [
                "editor.action.smartSelect.shrink"
            ]
        },
    ],
    // ---------------------------------------------
    // --------  Multi-Command Extension   ---------
    "multiCommand.commands": [
        {
            // This is a hack so <ctrl-s> can map to SAVE and "enter normal mode"
            "command": "multiCommand.vimSaveNormalMode",
            "sequence": [
                "extension.vim_escape",
                "workbench.action.files.save"
            ]
        },
    ],
    "extensions.experimental.deferredStartupFinishedActivation": true,
    "[c]": {
        "files.trimTrailingWhitespace": false,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    "[proto]": {
        "files.trimTrailingWhitespace": false,
        "editor.defaultFormatter": "nuclide.arclint"
    },
    "editor.inlineSuggest.allowSuggestOnTriggerCharacters": true,
    "[starlark]": {
        "files.trimTrailingWhitespace": false,
        "editor.defaultFormatter": "nuclide.arclint",
        "editor.formatOnSave": true
    },
    "wasabi.interactiveDevelopment.introMessageNumTimesShown": 3,
    "wasabi.interactiveDevelopment.disableIntroMessage": true,
    "python-debugger.displaySeamlessDebuggingMessage": false,
    "bento.defaultPythonNotebookViewTypeOnOpeningFile": "notebook",
    "terminal.integrated.scrollback": 10000,
    "[objective-c]": {
        "editor.defaultFormatter": "nuclide.arclint"
    },
    "[objective-cpp]": {
        "editor.defaultFormatter": "nuclide.arclint"
    },
    "[cuda-cpp]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "nuclide.arclint"
    },
    "[tcc-cpp]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "nuclide.arclint"
    },
    "[ocaml]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "nuclide.arclint"
    },
}
